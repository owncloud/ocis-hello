// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/sharing/collaboration/v1beta1/collaboration_api.proto

package collaborationv1beta1

import (
	context "context"
	fmt "fmt"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/rpc/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The information of the resource to be shared.
	ResourceInfo *v1beta11.ResourceInfo `protobuf:"bytes,2,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	// REQUIRED.
	// The share grant for the share.
	Grant                *ShareGrant `protobuf:"bytes,3,opt,name=grant,proto3" json:"grant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateShareRequest) Reset()         { *m = CreateShareRequest{} }
func (m *CreateShareRequest) String() string { return proto.CompactTextString(m) }
func (*CreateShareRequest) ProtoMessage()    {}
func (*CreateShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{0}
}

func (m *CreateShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateShareRequest.Unmarshal(m, b)
}
func (m *CreateShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateShareRequest.Marshal(b, m, deterministic)
}
func (m *CreateShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateShareRequest.Merge(m, src)
}
func (m *CreateShareRequest) XXX_Size() int {
	return xxx_messageInfo_CreateShareRequest.Size(m)
}
func (m *CreateShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateShareRequest proto.InternalMessageInfo

func (m *CreateShareRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *CreateShareRequest) GetResourceInfo() *v1beta11.ResourceInfo {
	if m != nil {
		return m.ResourceInfo
	}
	return nil
}

func (m *CreateShareRequest) GetGrant() *ShareGrant {
	if m != nil {
		return m.Grant
	}
	return nil
}

type CreateShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The created share.
	Share                *Share   `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateShareResponse) Reset()         { *m = CreateShareResponse{} }
func (m *CreateShareResponse) String() string { return proto.CompactTextString(m) }
func (*CreateShareResponse) ProtoMessage()    {}
func (*CreateShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{1}
}

func (m *CreateShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateShareResponse.Unmarshal(m, b)
}
func (m *CreateShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateShareResponse.Marshal(b, m, deterministic)
}
func (m *CreateShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateShareResponse.Merge(m, src)
}
func (m *CreateShareResponse) XXX_Size() int {
	return xxx_messageInfo_CreateShareResponse.Size(m)
}
func (m *CreateShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateShareResponse proto.InternalMessageInfo

func (m *CreateShareResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateShareResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *CreateShareResponse) GetShare() *Share {
	if m != nil {
		return m.Share
	}
	return nil
}

type UpdateShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	Ref    *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// REQUIRED.
	Field                *UpdateShareRequest_UpdateField `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UpdateShareRequest) Reset()         { *m = UpdateShareRequest{} }
func (m *UpdateShareRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateShareRequest) ProtoMessage()    {}
func (*UpdateShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{2}
}

func (m *UpdateShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateShareRequest.Unmarshal(m, b)
}
func (m *UpdateShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateShareRequest.Marshal(b, m, deterministic)
}
func (m *UpdateShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateShareRequest.Merge(m, src)
}
func (m *UpdateShareRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateShareRequest.Size(m)
}
func (m *UpdateShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateShareRequest proto.InternalMessageInfo

func (m *UpdateShareRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *UpdateShareRequest) GetRef() *ShareReference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *UpdateShareRequest) GetField() *UpdateShareRequest_UpdateField {
	if m != nil {
		return m.Field
	}
	return nil
}

// REQUIRED.
type UpdateShareRequest_UpdateField struct {
	// One of the update fields MUST be specified.
	//
	// Types that are valid to be assigned to Field:
	//	*UpdateShareRequest_UpdateField_Permissions
	//	*UpdateShareRequest_UpdateField_DisplayName
	Field                isUpdateShareRequest_UpdateField_Field `protobuf_oneof:"field"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *UpdateShareRequest_UpdateField) Reset()         { *m = UpdateShareRequest_UpdateField{} }
func (m *UpdateShareRequest_UpdateField) String() string { return proto.CompactTextString(m) }
func (*UpdateShareRequest_UpdateField) ProtoMessage()    {}
func (*UpdateShareRequest_UpdateField) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{2, 0}
}

func (m *UpdateShareRequest_UpdateField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateShareRequest_UpdateField.Unmarshal(m, b)
}
func (m *UpdateShareRequest_UpdateField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateShareRequest_UpdateField.Marshal(b, m, deterministic)
}
func (m *UpdateShareRequest_UpdateField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateShareRequest_UpdateField.Merge(m, src)
}
func (m *UpdateShareRequest_UpdateField) XXX_Size() int {
	return xxx_messageInfo_UpdateShareRequest_UpdateField.Size(m)
}
func (m *UpdateShareRequest_UpdateField) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateShareRequest_UpdateField.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateShareRequest_UpdateField proto.InternalMessageInfo

type isUpdateShareRequest_UpdateField_Field interface {
	isUpdateShareRequest_UpdateField_Field()
}

type UpdateShareRequest_UpdateField_Permissions struct {
	Permissions *SharePermissions `protobuf:"bytes,2,opt,name=permissions,proto3,oneof"`
}

type UpdateShareRequest_UpdateField_DisplayName struct {
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3,oneof"`
}

func (*UpdateShareRequest_UpdateField_Permissions) isUpdateShareRequest_UpdateField_Field() {}

func (*UpdateShareRequest_UpdateField_DisplayName) isUpdateShareRequest_UpdateField_Field() {}

func (m *UpdateShareRequest_UpdateField) GetField() isUpdateShareRequest_UpdateField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *UpdateShareRequest_UpdateField) GetPermissions() *SharePermissions {
	if x, ok := m.GetField().(*UpdateShareRequest_UpdateField_Permissions); ok {
		return x.Permissions
	}
	return nil
}

func (m *UpdateShareRequest_UpdateField) GetDisplayName() string {
	if x, ok := m.GetField().(*UpdateShareRequest_UpdateField_DisplayName); ok {
		return x.DisplayName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateShareRequest_UpdateField) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateShareRequest_UpdateField_Permissions)(nil),
		(*UpdateShareRequest_UpdateField_DisplayName)(nil),
	}
}

type UpdateShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The updated share.
	Share                *Share   `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateShareResponse) Reset()         { *m = UpdateShareResponse{} }
func (m *UpdateShareResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateShareResponse) ProtoMessage()    {}
func (*UpdateShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{3}
}

func (m *UpdateShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateShareResponse.Unmarshal(m, b)
}
func (m *UpdateShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateShareResponse.Marshal(b, m, deterministic)
}
func (m *UpdateShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateShareResponse.Merge(m, src)
}
func (m *UpdateShareResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateShareResponse.Size(m)
}
func (m *UpdateShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateShareResponse proto.InternalMessageInfo

func (m *UpdateShareResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UpdateShareResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *UpdateShareResponse) GetShare() *Share {
	if m != nil {
		return m.Share
	}
	return nil
}

type ListSharesRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// OPTIONAL.
	// The list of filters to apply if any.
	Filters []*Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// OPTIONAL.
	// Clients use this field to specify the maximum number of results to be returned by the server.
	// The server may further constrain the maximum number of results returned in a single page.
	// If the page_size is 0, the server will decide the number of results to be returned.
	// see https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// OPTIONAL.
	// The client uses this field to request a specific page of the list results.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSharesRequest) Reset()         { *m = ListSharesRequest{} }
func (m *ListSharesRequest) String() string { return proto.CompactTextString(m) }
func (*ListSharesRequest) ProtoMessage()    {}
func (*ListSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{4}
}

func (m *ListSharesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSharesRequest.Unmarshal(m, b)
}
func (m *ListSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSharesRequest.Marshal(b, m, deterministic)
}
func (m *ListSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSharesRequest.Merge(m, src)
}
func (m *ListSharesRequest) XXX_Size() int {
	return xxx_messageInfo_ListSharesRequest.Size(m)
}
func (m *ListSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSharesRequest proto.InternalMessageInfo

func (m *ListSharesRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListSharesRequest) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListSharesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSharesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListSharesResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of shares.
	Shares []*Share `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
	// OPTIONAL.
	// This field represents the pagination token to retrieve the next page of results.
	// If the value is "", it means no further results for the request.
	// see https://cloud.google.com/apis/design/design_patterns#list_pagination
	NextPageToken        string   `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSharesResponse) Reset()         { *m = ListSharesResponse{} }
func (m *ListSharesResponse) String() string { return proto.CompactTextString(m) }
func (*ListSharesResponse) ProtoMessage()    {}
func (*ListSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{5}
}

func (m *ListSharesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSharesResponse.Unmarshal(m, b)
}
func (m *ListSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSharesResponse.Marshal(b, m, deterministic)
}
func (m *ListSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSharesResponse.Merge(m, src)
}
func (m *ListSharesResponse) XXX_Size() int {
	return xxx_messageInfo_ListSharesResponse.Size(m)
}
func (m *ListSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSharesResponse proto.InternalMessageInfo

func (m *ListSharesResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListSharesResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListSharesResponse) GetShares() []*Share {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *ListSharesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type RemoveShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RemoveShareRequest) Reset()         { *m = RemoveShareRequest{} }
func (m *RemoveShareRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveShareRequest) ProtoMessage()    {}
func (*RemoveShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{6}
}

func (m *RemoveShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveShareRequest.Unmarshal(m, b)
}
func (m *RemoveShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveShareRequest.Marshal(b, m, deterministic)
}
func (m *RemoveShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveShareRequest.Merge(m, src)
}
func (m *RemoveShareRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveShareRequest.Size(m)
}
func (m *RemoveShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveShareRequest proto.InternalMessageInfo

func (m *RemoveShareRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *RemoveShareRequest) GetRef() *ShareReference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type RemoveShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque               *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RemoveShareResponse) Reset()         { *m = RemoveShareResponse{} }
func (m *RemoveShareResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveShareResponse) ProtoMessage()    {}
func (*RemoveShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{7}
}

func (m *RemoveShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveShareResponse.Unmarshal(m, b)
}
func (m *RemoveShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveShareResponse.Marshal(b, m, deterministic)
}
func (m *RemoveShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveShareResponse.Merge(m, src)
}
func (m *RemoveShareResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveShareResponse.Size(m)
}
func (m *RemoveShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveShareResponse proto.InternalMessageInfo

func (m *RemoveShareResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RemoveShareResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

type GetShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetShareRequest) Reset()         { *m = GetShareRequest{} }
func (m *GetShareRequest) String() string { return proto.CompactTextString(m) }
func (*GetShareRequest) ProtoMessage()    {}
func (*GetShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{8}
}

func (m *GetShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetShareRequest.Unmarshal(m, b)
}
func (m *GetShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetShareRequest.Marshal(b, m, deterministic)
}
func (m *GetShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShareRequest.Merge(m, src)
}
func (m *GetShareRequest) XXX_Size() int {
	return xxx_messageInfo_GetShareRequest.Size(m)
}
func (m *GetShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShareRequest proto.InternalMessageInfo

func (m *GetShareRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetShareRequest) GetRef() *ShareReference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type GetShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share                *Share   `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetShareResponse) Reset()         { *m = GetShareResponse{} }
func (m *GetShareResponse) String() string { return proto.CompactTextString(m) }
func (*GetShareResponse) ProtoMessage()    {}
func (*GetShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{9}
}

func (m *GetShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetShareResponse.Unmarshal(m, b)
}
func (m *GetShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetShareResponse.Marshal(b, m, deterministic)
}
func (m *GetShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShareResponse.Merge(m, src)
}
func (m *GetShareResponse) XXX_Size() int {
	return xxx_messageInfo_GetShareResponse.Size(m)
}
func (m *GetShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShareResponse proto.InternalMessageInfo

func (m *GetShareResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetShareResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetShareResponse) GetShare() *Share {
	if m != nil {
		return m.Share
	}
	return nil
}

type ListReceivedSharesRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// OPTIONAL.
	// The list of filters to apply if any.
	Filters []*Filter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// OPTIONAL.
	// Clients use this field to specify the maximum number of results to be returned by the server.
	// The server may further constrain the maximum number of results returned in a single page.
	// If the page_size is 0, the server will decide the number of results to be returned.
	// see https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// OPTIONAL.
	// The client uses this field to request a specific page of the list results.
	PageToken            string   `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReceivedSharesRequest) Reset()         { *m = ListReceivedSharesRequest{} }
func (m *ListReceivedSharesRequest) String() string { return proto.CompactTextString(m) }
func (*ListReceivedSharesRequest) ProtoMessage()    {}
func (*ListReceivedSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{10}
}

func (m *ListReceivedSharesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReceivedSharesRequest.Unmarshal(m, b)
}
func (m *ListReceivedSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReceivedSharesRequest.Marshal(b, m, deterministic)
}
func (m *ListReceivedSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReceivedSharesRequest.Merge(m, src)
}
func (m *ListReceivedSharesRequest) XXX_Size() int {
	return xxx_messageInfo_ListReceivedSharesRequest.Size(m)
}
func (m *ListReceivedSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReceivedSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListReceivedSharesRequest proto.InternalMessageInfo

func (m *ListReceivedSharesRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListReceivedSharesRequest) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListReceivedSharesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListReceivedSharesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListReceivedSharesResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of received shares.
	Shares []*ReceivedShare `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
	// OPTIONAL.
	// This field represents the pagination token to retrieve the next page of results.
	// If the value is "", it means no further results for the request.
	// see https://cloud.google.com/apis/design/design_patterns#list_pagination
	NextPageToken        string   `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReceivedSharesResponse) Reset()         { *m = ListReceivedSharesResponse{} }
func (m *ListReceivedSharesResponse) String() string { return proto.CompactTextString(m) }
func (*ListReceivedSharesResponse) ProtoMessage()    {}
func (*ListReceivedSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{11}
}

func (m *ListReceivedSharesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReceivedSharesResponse.Unmarshal(m, b)
}
func (m *ListReceivedSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReceivedSharesResponse.Marshal(b, m, deterministic)
}
func (m *ListReceivedSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReceivedSharesResponse.Merge(m, src)
}
func (m *ListReceivedSharesResponse) XXX_Size() int {
	return xxx_messageInfo_ListReceivedSharesResponse.Size(m)
}
func (m *ListReceivedSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReceivedSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListReceivedSharesResponse proto.InternalMessageInfo

func (m *ListReceivedSharesResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListReceivedSharesResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListReceivedSharesResponse) GetShares() []*ReceivedShare {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *ListReceivedSharesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// TODO(labkode): clean up display_name ? we'll use storage links for that.
type UpdateReceivedShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The received share to update.
	Share *ReceivedShare `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
	// The update mask applies to the resource. For the `FieldMask` definition,
	// see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateReceivedShareRequest) Reset()         { *m = UpdateReceivedShareRequest{} }
func (m *UpdateReceivedShareRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateReceivedShareRequest) ProtoMessage()    {}
func (*UpdateReceivedShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{12}
}

func (m *UpdateReceivedShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReceivedShareRequest.Unmarshal(m, b)
}
func (m *UpdateReceivedShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReceivedShareRequest.Marshal(b, m, deterministic)
}
func (m *UpdateReceivedShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReceivedShareRequest.Merge(m, src)
}
func (m *UpdateReceivedShareRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateReceivedShareRequest.Size(m)
}
func (m *UpdateReceivedShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReceivedShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReceivedShareRequest proto.InternalMessageInfo

func (m *UpdateReceivedShareRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *UpdateReceivedShareRequest) GetShare() *ReceivedShare {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *UpdateReceivedShareRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type UpdateReceivedShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The updated share.
	Share                *ReceivedShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateReceivedShareResponse) Reset()         { *m = UpdateReceivedShareResponse{} }
func (m *UpdateReceivedShareResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateReceivedShareResponse) ProtoMessage()    {}
func (*UpdateReceivedShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{13}
}

func (m *UpdateReceivedShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReceivedShareResponse.Unmarshal(m, b)
}
func (m *UpdateReceivedShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReceivedShareResponse.Marshal(b, m, deterministic)
}
func (m *UpdateReceivedShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReceivedShareResponse.Merge(m, src)
}
func (m *UpdateReceivedShareResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateReceivedShareResponse.Size(m)
}
func (m *UpdateReceivedShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReceivedShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReceivedShareResponse proto.InternalMessageInfo

func (m *UpdateReceivedShareResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UpdateReceivedShareResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *UpdateReceivedShareResponse) GetShare() *ReceivedShare {
	if m != nil {
		return m.Share
	}
	return nil
}

type GetReceivedShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference of the received share.
	Ref                  *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetReceivedShareRequest) Reset()         { *m = GetReceivedShareRequest{} }
func (m *GetReceivedShareRequest) String() string { return proto.CompactTextString(m) }
func (*GetReceivedShareRequest) ProtoMessage()    {}
func (*GetReceivedShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{14}
}

func (m *GetReceivedShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReceivedShareRequest.Unmarshal(m, b)
}
func (m *GetReceivedShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReceivedShareRequest.Marshal(b, m, deterministic)
}
func (m *GetReceivedShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReceivedShareRequest.Merge(m, src)
}
func (m *GetReceivedShareRequest) XXX_Size() int {
	return xxx_messageInfo_GetReceivedShareRequest.Size(m)
}
func (m *GetReceivedShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReceivedShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReceivedShareRequest proto.InternalMessageInfo

func (m *GetReceivedShareRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetReceivedShareRequest) GetRef() *ShareReference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type GetReceivedShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share                *ReceivedShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetReceivedShareResponse) Reset()         { *m = GetReceivedShareResponse{} }
func (m *GetReceivedShareResponse) String() string { return proto.CompactTextString(m) }
func (*GetReceivedShareResponse) ProtoMessage()    {}
func (*GetReceivedShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b58cdfce2e5a7f0, []int{15}
}

func (m *GetReceivedShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReceivedShareResponse.Unmarshal(m, b)
}
func (m *GetReceivedShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReceivedShareResponse.Marshal(b, m, deterministic)
}
func (m *GetReceivedShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReceivedShareResponse.Merge(m, src)
}
func (m *GetReceivedShareResponse) XXX_Size() int {
	return xxx_messageInfo_GetReceivedShareResponse.Size(m)
}
func (m *GetReceivedShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReceivedShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReceivedShareResponse proto.InternalMessageInfo

func (m *GetReceivedShareResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetReceivedShareResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetReceivedShareResponse) GetShare() *ReceivedShare {
	if m != nil {
		return m.Share
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateShareRequest)(nil), "cs3.sharing.collaboration.v1beta1.CreateShareRequest")
	proto.RegisterType((*CreateShareResponse)(nil), "cs3.sharing.collaboration.v1beta1.CreateShareResponse")
	proto.RegisterType((*UpdateShareRequest)(nil), "cs3.sharing.collaboration.v1beta1.UpdateShareRequest")
	proto.RegisterType((*UpdateShareRequest_UpdateField)(nil), "cs3.sharing.collaboration.v1beta1.UpdateShareRequest.UpdateField")
	proto.RegisterType((*UpdateShareResponse)(nil), "cs3.sharing.collaboration.v1beta1.UpdateShareResponse")
	proto.RegisterType((*ListSharesRequest)(nil), "cs3.sharing.collaboration.v1beta1.ListSharesRequest")
	proto.RegisterType((*ListSharesResponse)(nil), "cs3.sharing.collaboration.v1beta1.ListSharesResponse")
	proto.RegisterType((*RemoveShareRequest)(nil), "cs3.sharing.collaboration.v1beta1.RemoveShareRequest")
	proto.RegisterType((*RemoveShareResponse)(nil), "cs3.sharing.collaboration.v1beta1.RemoveShareResponse")
	proto.RegisterType((*GetShareRequest)(nil), "cs3.sharing.collaboration.v1beta1.GetShareRequest")
	proto.RegisterType((*GetShareResponse)(nil), "cs3.sharing.collaboration.v1beta1.GetShareResponse")
	proto.RegisterType((*ListReceivedSharesRequest)(nil), "cs3.sharing.collaboration.v1beta1.ListReceivedSharesRequest")
	proto.RegisterType((*ListReceivedSharesResponse)(nil), "cs3.sharing.collaboration.v1beta1.ListReceivedSharesResponse")
	proto.RegisterType((*UpdateReceivedShareRequest)(nil), "cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest")
	proto.RegisterType((*UpdateReceivedShareResponse)(nil), "cs3.sharing.collaboration.v1beta1.UpdateReceivedShareResponse")
	proto.RegisterType((*GetReceivedShareRequest)(nil), "cs3.sharing.collaboration.v1beta1.GetReceivedShareRequest")
	proto.RegisterType((*GetReceivedShareResponse)(nil), "cs3.sharing.collaboration.v1beta1.GetReceivedShareResponse")
}

func init() {
	proto.RegisterFile("cs3/sharing/collaboration/v1beta1/collaboration_api.proto", fileDescriptor_2b58cdfce2e5a7f0)
}

var fileDescriptor_2b58cdfce2e5a7f0 = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0x66, 0xec, 0x3a, 0x6d, 0x9f, 0x5b, 0xb5, 0x4c, 0x41, 0x75, 0xb7, 0x54, 0x6a, 0x8d, 0x40,
	0x01, 0xc1, 0x1a, 0xc7, 0x14, 0x09, 0x4a, 0x2b, 0x1a, 0x4b, 0x49, 0x2b, 0x01, 0xb5, 0x36, 0x40,
	0x25, 0x14, 0xc9, 0x9a, 0xac, 0x9f, 0xdd, 0x55, 0xec, 0x9d, 0xed, 0xcc, 0x38, 0x22, 0x55, 0xff,
	0x00, 0x82, 0x4b, 0xa5, 0xfe, 0x02, 0xc4, 0x89, 0x3b, 0x48, 0xfc, 0x01, 0x10, 0x5c, 0xb8, 0x70,
	0xe5, 0xc2, 0x4f, 0xe0, 0xcc, 0x01, 0xcd, 0xec, 0xd8, 0xde, 0x8d, 0x0d, 0x19, 0x1b, 0x2b, 0x6a,
	0x6e, 0xf6, 0xec, 0xf7, 0x7d, 0xf3, 0xbe, 0xf7, 0x66, 0xe7, 0xbd, 0x85, 0x77, 0x43, 0xd9, 0xa8,
	0xc9, 0x07, 0x4c, 0x44, 0x71, 0xaf, 0x16, 0xf2, 0x7e, 0x9f, 0xed, 0x70, 0xc1, 0x54, 0xc4, 0xe3,
	0xda, 0x5e, 0x7d, 0x07, 0x15, 0xab, 0xe7, 0x57, 0xdb, 0x2c, 0x89, 0xfc, 0x44, 0x70, 0xc5, 0xe9,
	0xb5, 0x50, 0x36, 0x7c, 0x4b, 0xf5, 0x73, 0x20, 0xdf, 0x52, 0xbd, 0x97, 0xb4, 0xba, 0x48, 0xc2,
	0xb1, 0x96, 0x54, 0x4c, 0x0d, 0x65, 0x2a, 0xe0, 0xd5, 0x0f, 0xdf, 0x5b, 0xa0, 0xe4, 0x43, 0x11,
	0xe2, 0x88, 0xf2, 0x86, 0xa1, 0x28, 0x2e, 0x58, 0x0f, 0x6b, 0x89, 0xe0, 0x7b, 0x51, 0x07, 0xc5,
	0xbf, 0xa2, 0xaf, 0x68, 0xb4, 0xda, 0x4f, 0x50, 0x8e, 0x21, 0xe6, 0x9f, 0x7d, 0x7c, 0xb5, 0xc7,
	0x79, 0xaf, 0x6f, 0x74, 0x14, 0xdf, 0x19, 0x76, 0x6b, 0xdd, 0x08, 0xfb, 0x9d, 0xf6, 0x80, 0xc9,
	0xdd, 0x14, 0x51, 0xfd, 0x83, 0x00, 0x6d, 0x0a, 0x64, 0x0a, 0xb7, 0x1e, 0x30, 0x81, 0x01, 0x3e,
	0x1c, 0xa2, 0x54, 0xb4, 0x0e, 0x2b, 0x3c, 0x61, 0x0f, 0x87, 0x58, 0x21, 0x57, 0xc9, 0x6a, 0x79,
	0xed, 0x92, 0xaf, 0x53, 0x91, 0x4a, 0xdb, 0x8d, 0xfc, 0x7b, 0x06, 0x10, 0x58, 0x20, 0xbd, 0x07,
	0x67, 0x47, 0xd1, 0xb5, 0xa3, 0xb8, 0xcb, 0x2b, 0x05, 0xc3, 0x7c, 0xdd, 0x30, 0xad, 0x21, 0x7f,
	0x64, 0x68, 0x2c, 0x12, 0x58, 0xca, 0xdd, 0xb8, 0xcb, 0x83, 0x33, 0x22, 0xf3, 0x8f, 0x36, 0xa1,
	0xd4, 0x13, 0x2c, 0x56, 0x95, 0xa2, 0x11, 0x7a, 0xd3, 0x3f, 0xb4, 0x1a, 0xbe, 0xf1, 0xb0, 0xa9,
	0x49, 0x41, 0xca, 0xad, 0xfe, 0x48, 0xe0, 0x42, 0xce, 0x9f, 0x4c, 0x78, 0x2c, 0x91, 0xd6, 0x60,
	0x25, 0xad, 0x94, 0x35, 0x78, 0xd1, 0xa8, 0x8b, 0x24, 0x9c, 0x68, 0x99, 0xc7, 0x81, 0x85, 0x65,
	0x32, 0x52, 0x70, 0xcd, 0xc8, 0x2d, 0x28, 0xe9, 0x70, 0xd1, 0x1a, 0x58, 0x75, 0x35, 0x10, 0xa4,
	0xb4, 0xea, 0xdf, 0x05, 0xa0, 0x9f, 0x26, 0x9d, 0x25, 0xd4, 0xa6, 0x09, 0x45, 0x81, 0x5d, 0x1b,
	0x79, 0xdd, 0x39, 0x0e, 0xec, 0xa2, 0xc0, 0x38, 0xc4, 0x40, 0xb3, 0xe9, 0x7d, 0x28, 0x99, 0xe3,
	0x63, 0xed, 0xdc, 0x76, 0x90, 0x99, 0x8e, 0xde, 0x2e, 0x6d, 0x68, 0xa1, 0x20, 0xd5, 0xf3, 0x9e,
	0x12, 0x28, 0x67, 0x96, 0xe9, 0x7d, 0x28, 0x27, 0x28, 0x06, 0x91, 0x94, 0x11, 0x8f, 0xa5, 0x8d,
	0xba, 0xe1, 0x1a, 0x75, 0x6b, 0x42, 0xbd, 0xf3, 0x5c, 0x90, 0x55, 0xa2, 0x2f, 0xc3, 0x99, 0x4e,
	0x24, 0x93, 0x3e, 0xdb, 0x6f, 0xc7, 0x6c, 0x90, 0xd6, 0xe5, 0xb4, 0x06, 0xd9, 0xd5, 0x8f, 0xd9,
	0x00, 0xd7, 0x4f, 0x5a, 0x9b, 0xe6, 0xe8, 0xe4, 0x0c, 0x1c, 0xa3, 0xa3, 0xf3, 0x33, 0x81, 0xe7,
	0x3f, 0x8c, 0xa4, 0x32, 0x8b, 0xf2, 0x7f, 0x9d, 0x9c, 0x93, 0xdd, 0xa8, 0xaf, 0x50, 0xe8, 0x3a,
	0x14, 0x57, 0xcb, 0x6b, 0xaf, 0x39, 0x84, 0xb2, 0x61, 0x18, 0xc1, 0x88, 0x49, 0x2f, 0xc3, 0xe9,
	0x84, 0xf5, 0xb0, 0x2d, 0xa3, 0x47, 0xa9, 0xa3, 0x52, 0x70, 0x4a, 0x2f, 0x6c, 0x45, 0x8f, 0x90,
	0x5e, 0x01, 0x30, 0x0f, 0x15, 0xdf, 0xc5, 0xb8, 0x72, 0x42, 0x97, 0x24, 0x30, 0xf0, 0x4f, 0xf4,
	0x42, 0xf5, 0x4f, 0x02, 0x34, 0xeb, 0xe4, 0x08, 0x8b, 0xf0, 0x01, 0xac, 0x98, 0x6c, 0xca, 0x4a,
	0xd1, 0x58, 0x77, 0xaf, 0x82, 0xe5, 0xd1, 0x57, 0xe1, 0x5c, 0x8c, 0x5f, 0xa8, 0xf6, 0x94, 0xc1,
	0xb3, 0x7a, 0xb9, 0x35, 0x36, 0xf9, 0x35, 0x01, 0x1a, 0xe0, 0x80, 0xef, 0x3d, 0x13, 0x6f, 0x7a,
	0x75, 0x1f, 0x2e, 0xe4, 0xa2, 0x39, 0xba, 0x9c, 0x57, 0xbf, 0x24, 0x70, 0x6e, 0x13, 0xd5, 0x33,
	0x91, 0x86, 0x1f, 0x08, 0x9c, 0x9f, 0xc4, 0x72, 0x8c, 0xde, 0xfe, 0xdf, 0x08, 0x5c, 0xd2, 0xef,
	0x4c, 0x80, 0x21, 0x46, 0x7b, 0xd8, 0x59, 0xe6, 0x2d, 0x50, 0x5c, 0xce, 0x2d, 0x70, 0xe2, 0x3f,
	0x6f, 0x81, 0xd2, 0xc1, 0x5b, 0xe0, 0x2f, 0x02, 0xde, 0x2c, 0x47, 0x47, 0x58, 0x94, 0x3b, 0x07,
	0x6e, 0x83, 0xb7, 0x1c, 0x52, 0x90, 0x0b, 0x77, 0xee, 0x5b, 0xe1, 0x77, 0x02, 0x5e, 0xda, 0x80,
	0xf2, 0x3a, 0x8b, 0xd7, 0x71, 0x63, 0x74, 0xb0, 0x52, 0xd7, 0xf3, 0x5b, 0x48, 0xe9, 0xf4, 0x06,
	0x94, 0x87, 0x26, 0x30, 0x33, 0x4a, 0xda, 0x63, 0xea, 0xf9, 0xe9, 0xb4, 0xe9, 0x8f, 0xa6, 0x4d,
	0xdf, 0xb4, 0xf3, 0x8f, 0x98, 0xdc, 0x0d, 0x20, 0x85, 0xeb, 0xdf, 0xd5, 0x5f, 0x08, 0x5c, 0x9e,
	0x69, 0xeb, 0x08, 0x8b, 0xb9, 0x91, 0x7f, 0xc3, 0x16, 0x4d, 0x44, 0xf5, 0x09, 0x81, 0x8b, 0x9b,
	0xa8, 0x96, 0x55, 0x9f, 0xa5, 0x5c, 0x5b, 0x3f, 0x11, 0xa8, 0x4c, 0xc7, 0x74, 0xfc, 0x92, 0xbb,
	0xf6, 0xfd, 0x29, 0x38, 0xdf, 0xcc, 0xc2, 0x6f, 0xb7, 0xee, 0xd2, 0xc7, 0x50, 0xce, 0xcc, 0xf3,
	0xf4, 0xba, 0x83, 0xf8, 0xf4, 0xf7, 0x8d, 0xf7, 0xce, 0xbc, 0x34, 0x9b, 0xbe, 0xc7, 0x50, 0xce,
	0x74, 0x46, 0xa7, 0xdd, 0xa7, 0xfb, 0xba, 0xd3, 0xee, 0xb3, 0x1a, 0xb0, 0x84, 0x53, 0xa3, 0x7e,
	0x44, 0xd7, 0x1c, 0x34, 0x0e, 0x34, 0x52, 0xaf, 0x31, 0x17, 0xc7, 0x6e, 0xba, 0x0f, 0x30, 0x99,
	0xbf, 0xe8, 0xdb, 0x0e, 0x12, 0x53, 0x83, 0xa7, 0x77, 0x7d, 0x4e, 0xd6, 0x24, 0xdb, 0x99, 0x01,
	0xdc, 0x29, 0xdb, 0xd3, 0x5f, 0x1c, 0x4e, 0xd9, 0x9e, 0x35, 0xe7, 0x3f, 0xb1, 0x93, 0x67, 0xbe,
	0xe7, 0xd0, 0xf7, 0x1d, 0xbd, 0xcc, 0x6c, 0xbe, 0xde, 0xcd, 0x05, 0xd9, 0x36, 0xa6, 0xa7, 0xe3,
	0x6f, 0x92, 0x1c, 0x80, 0xde, 0x74, 0xf6, 0x38, 0xeb, 0xaa, 0xf2, 0x6e, 0x2d, 0x4a, 0xb7, 0x61,
	0x7d, 0x95, 0x4e, 0x4a, 0xf9, 0x98, 0xde, 0x73, 0x3b, 0x6d, 0x33, 0x03, 0xba, 0xb1, 0x10, 0x37,
	0x8d, 0x66, 0xfd, 0x5b, 0x02, 0xaf, 0x84, 0x7c, 0x70, 0xb8, 0xc4, 0xfa, 0x8b, 0xf9, 0xeb, 0x25,
	0x89, 0x5a, 0xba, 0x75, 0xb5, 0xc8, 0xe7, 0x2f, 0xe4, 0xf0, 0x16, 0xfe, 0x4d, 0xa1, 0xd8, 0xdc,
	0x6a, 0x7e, 0x57, 0xb8, 0xd6, 0x94, 0x0d, 0x73, 0xf3, 0x6a, 0xe1, 0x9c, 0x82, 0xff, 0x59, 0x7d,
	0x5d, 0x23, 0x7f, 0x35, 0x98, 0x6d, 0x8b, 0xd9, 0xce, 0x61, 0xb6, 0x2d, 0x66, 0x67, 0xc5, 0xf4,
	0xc9, 0xc6, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xb3, 0xa1, 0x80, 0xa1, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollaborationAPIClient is the client API for CollaborationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollaborationAPIClient interface {
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(ctx context.Context, in *CreateShareRequest, opts ...grpc.CallOption) (*CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(ctx context.Context, in *RemoveShareRequest, opts ...grpc.CallOption) (*RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(ctx context.Context, in *GetShareRequest, opts ...grpc.CallOption) (*GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(ctx context.Context, in *ListSharesRequest, opts ...grpc.CallOption) (*ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(ctx context.Context, in *UpdateShareRequest, opts ...grpc.CallOption) (*UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(ctx context.Context, in *ListReceivedSharesRequest, opts ...grpc.CallOption) (*ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(ctx context.Context, in *UpdateReceivedShareRequest, opts ...grpc.CallOption) (*UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(ctx context.Context, in *GetReceivedShareRequest, opts ...grpc.CallOption) (*GetReceivedShareResponse, error)
}

type collaborationAPIClient struct {
	cc *grpc.ClientConn
}

func NewCollaborationAPIClient(cc *grpc.ClientConn) CollaborationAPIClient {
	return &collaborationAPIClient{cc}
}

func (c *collaborationAPIClient) CreateShare(ctx context.Context, in *CreateShareRequest, opts ...grpc.CallOption) (*CreateShareResponse, error) {
	out := new(CreateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/CreateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) RemoveShare(ctx context.Context, in *RemoveShareRequest, opts ...grpc.CallOption) (*RemoveShareResponse, error) {
	out := new(RemoveShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/RemoveShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) GetShare(ctx context.Context, in *GetShareRequest, opts ...grpc.CallOption) (*GetShareResponse, error) {
	out := new(GetShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) ListShares(ctx context.Context, in *ListSharesRequest, opts ...grpc.CallOption) (*ListSharesResponse, error) {
	out := new(ListSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/ListShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) UpdateShare(ctx context.Context, in *UpdateShareRequest, opts ...grpc.CallOption) (*UpdateShareResponse, error) {
	out := new(UpdateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/UpdateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) ListReceivedShares(ctx context.Context, in *ListReceivedSharesRequest, opts ...grpc.CallOption) (*ListReceivedSharesResponse, error) {
	out := new(ListReceivedSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/ListReceivedShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) UpdateReceivedShare(ctx context.Context, in *UpdateReceivedShareRequest, opts ...grpc.CallOption) (*UpdateReceivedShareResponse, error) {
	out := new(UpdateReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/UpdateReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) GetReceivedShare(ctx context.Context, in *GetReceivedShareRequest, opts ...grpc.CallOption) (*GetReceivedShareResponse, error) {
	out := new(GetReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/GetReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationAPIServer is the server API for CollaborationAPI service.
type CollaborationAPIServer interface {
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(context.Context, *CreateShareRequest) (*CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(context.Context, *RemoveShareRequest) (*RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(context.Context, *GetShareRequest) (*GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(context.Context, *ListSharesRequest) (*ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(context.Context, *UpdateShareRequest) (*UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(context.Context, *ListReceivedSharesRequest) (*ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(context.Context, *UpdateReceivedShareRequest) (*UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(context.Context, *GetReceivedShareRequest) (*GetReceivedShareResponse, error)
}

// UnimplementedCollaborationAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCollaborationAPIServer struct {
}

func (*UnimplementedCollaborationAPIServer) CreateShare(ctx context.Context, req *CreateShareRequest) (*CreateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) RemoveShare(ctx context.Context, req *RemoveShareRequest) (*RemoveShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) GetShare(ctx context.Context, req *GetShareRequest) (*GetShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) ListShares(ctx context.Context, req *ListSharesRequest) (*ListSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShares not implemented")
}
func (*UnimplementedCollaborationAPIServer) UpdateShare(ctx context.Context, req *UpdateShareRequest) (*UpdateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) ListReceivedShares(ctx context.Context, req *ListReceivedSharesRequest) (*ListReceivedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedShares not implemented")
}
func (*UnimplementedCollaborationAPIServer) UpdateReceivedShare(ctx context.Context, req *UpdateReceivedShareRequest) (*UpdateReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) GetReceivedShare(ctx context.Context, req *GetReceivedShareRequest) (*GetReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedShare not implemented")
}

func RegisterCollaborationAPIServer(s *grpc.Server, srv CollaborationAPIServer) {
	s.RegisterService(&_CollaborationAPI_serviceDesc, srv)
}

func _CollaborationAPI_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).CreateShare(ctx, req.(*CreateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_RemoveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).RemoveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/RemoveShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).RemoveShare(ctx, req.(*RemoveShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).GetShare(ctx, req.(*GetShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).ListShares(ctx, req.(*ListSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_UpdateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).UpdateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/UpdateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).UpdateShare(ctx, req.(*UpdateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_ListReceivedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceivedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).ListReceivedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/ListReceivedShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).ListReceivedShares(ctx, req.(*ListReceivedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_UpdateReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).UpdateReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/UpdateReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).UpdateReceivedShare(ctx, req.(*UpdateReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_GetReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).GetReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/GetReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).GetReceivedShare(ctx, req.(*GetReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollaborationAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.sharing.collaboration.v1beta1.CollaborationAPI",
	HandlerType: (*CollaborationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShare",
			Handler:    _CollaborationAPI_CreateShare_Handler,
		},
		{
			MethodName: "RemoveShare",
			Handler:    _CollaborationAPI_RemoveShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _CollaborationAPI_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _CollaborationAPI_ListShares_Handler,
		},
		{
			MethodName: "UpdateShare",
			Handler:    _CollaborationAPI_UpdateShare_Handler,
		},
		{
			MethodName: "ListReceivedShares",
			Handler:    _CollaborationAPI_ListReceivedShares_Handler,
		},
		{
			MethodName: "UpdateReceivedShare",
			Handler:    _CollaborationAPI_UpdateReceivedShare_Handler,
		},
		{
			MethodName: "GetReceivedShare",
			Handler:    _CollaborationAPI_GetReceivedShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/sharing/collaboration/v1beta1/collaboration_api.proto",
}
