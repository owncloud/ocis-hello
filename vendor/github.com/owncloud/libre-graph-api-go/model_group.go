/*
Libre Graph API

Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.

API version: v1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libregraph

import (
	"encoding/json"
)

// Group struct for Group
type Group struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// An optional description for the group. Returned by default.
	Description *string `json:"description,omitempty"`
	// The display name for the group. This property is required when a group is created and cannot be cleared during updates. Returned by default. Supports $search and $orderBy.
	DisplayName *string `json:"displayName,omitempty"`
	// Specifies the group types. In MS Graph a group can have multiple types, so this is an array. In libreGraph the possible group types deviate from the MS Graph. The only group type that we currently support is \"ReadOnly\", which is set for groups that cannot be modified on the current instance.
	GroupTypes []string `json:"groupTypes,omitempty"`
	// Users and groups that are members of this group. HTTP Methods: GET (supported for all groups), Nullable. Supports $expand.
	Members []User `json:"members,omitempty"`
	// A list of member references to the members to be added. Up to 20 members can be added with a single request
	MembersodataBind []string `json:"members@odata.bind,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Group) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Group) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Group) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Group) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Group) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Group) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Group) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Group) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Group) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetGroupTypes returns the GroupTypes field value if set, zero value otherwise.
func (o *Group) GetGroupTypes() []string {
	if o == nil || o.GroupTypes == nil {
		var ret []string
		return ret
	}
	return o.GroupTypes
}

// GetGroupTypesOk returns a tuple with the GroupTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupTypesOk() ([]string, bool) {
	if o == nil || o.GroupTypes == nil {
		return nil, false
	}
	return o.GroupTypes, true
}

// HasGroupTypes returns a boolean if a field has been set.
func (o *Group) HasGroupTypes() bool {
	if o != nil && o.GroupTypes != nil {
		return true
	}

	return false
}

// SetGroupTypes gets a reference to the given []string and assigns it to the GroupTypes field.
func (o *Group) SetGroupTypes(v []string) {
	o.GroupTypes = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Group) GetMembers() []User {
	if o == nil || o.Members == nil {
		var ret []User
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMembersOk() ([]User, bool) {
	if o == nil || o.Members == nil {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Group) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []User and assigns it to the Members field.
func (o *Group) SetMembers(v []User) {
	o.Members = v
}

// GetMembersodataBind returns the MembersodataBind field value if set, zero value otherwise.
func (o *Group) GetMembersodataBind() []string {
	if o == nil || o.MembersodataBind == nil {
		var ret []string
		return ret
	}
	return o.MembersodataBind
}

// GetMembersodataBindOk returns a tuple with the MembersodataBind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMembersodataBindOk() ([]string, bool) {
	if o == nil || o.MembersodataBind == nil {
		return nil, false
	}
	return o.MembersodataBind, true
}

// HasMembersodataBind returns a boolean if a field has been set.
func (o *Group) HasMembersodataBind() bool {
	if o != nil && o.MembersodataBind != nil {
		return true
	}

	return false
}

// SetMembersodataBind gets a reference to the given []string and assigns it to the MembersodataBind field.
func (o *Group) SetMembersodataBind(v []string) {
	o.MembersodataBind = v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.GroupTypes != nil {
		toSerialize["groupTypes"] = o.GroupTypes
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	if o.MembersodataBind != nil {
		toSerialize["members@odata.bind"] = o.MembersodataBind
	}
	return json.Marshal(toSerialize)
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
